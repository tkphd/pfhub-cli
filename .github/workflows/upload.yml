name: PFHub Upload
on:
  issues:
    types: [labeled, edited]

jobs:
  pfhub-upload:

    # Only run workflow if this is an upload issue
    if: ${{ contains(github.event.issue.labels.*.name, 'upload') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Parse the submitted issue
      - uses: stefanbuck/github-issue-parser@v2
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/upload.yml

      # Write the issue output to a JSON for later use (could have the
      # next two steps together
      - run: echo '${{ steps.issue-parser.outputs.jsonString }}' > upload.json

      # Use funky method to store the summary for later use as it has
      # a multi-line value
      - name: Set summary variable
        id: summary
        run: echo ::set-output value::$(jq -r '.summary' upload.json)

      # Remove summary as it is multi-line so can't be included in the
      # GITHUB_ENV
      - run: jq 'del(.summary)' upload.json > upload_mod.json

      # Write the contents of the issue to the environment (it's a
      # flat JSON file). It can't have multi-line values so summary is
      # done separately
      - id: jq
        run: jq -r 'to_entries|map("\(.key)=\(.value|tostring)")|.[]' upload_mod.json >> $GITHUB_ENV

      # Don't need the JSON file and will be submitted in the PR if
      # kept
      - run: rm upload_mod.json

      # Set useful variable used more that once
      - run: echo "AUTHOR=${{ github.event.issue.user.login }}" >> $GITHUB_ENV
      - run: echo "METAPATH=_data/simulations/${{ env.short_name }}/meta.yaml" >> $GITHUB_ENV

      # Need a new directory for the upload
      - run: mkdir -p _data/simulations/${{ env.short_name }}

      # Make the environment using envsubstr and the meta.yaml
      # template. The data is already part of the environment from the
      # "jq" step above from previous steps.
      - name: Fill out meta.yaml
        uses: nowactions/envsubst@v1
        with:
          input: ./_data/meta_template.yaml
          output: ${{ env.METAPATH }}
        env:
          BENCHMARK_ID: ${{ env.benchmark_id }}
          GITHUB_ID: ${{ env.AUTHOR }}
          REPO_URL: ${{ env.repo }}
          SUMMARY: ${{ steps.summary.outputs.value }}
          CODE_NAME: ${{ env.code }}
          BENCHMARK_VERSION: ${{ env.benchmark_version }}
          GIT_HASH: ${{ env.git_hash }}
          CONTAINER: ${{ env.container }}

      - run: rm upload.json

      # Make the meta.yaml look nice. Long strings will be wrapped
      # correctly using -P or pretty print
      - run: yq -i -P ${{ env.METAPATH }}

      # Update the simulation list with the new simulation. Path is
      # slightly altered as the python-pfhub is assuming a know
      # location.
      - run: yq -i '. += "./simulations/${{ env.short_name }}/meta.yaml"' _data/simulation_list.yaml

      # Create the pull request with a link to the issue that started
      # the action. PFHub user generates the PR. The user who
      # generated the issue does the commit.
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        id: create-pr
        with:
          commit-message: "upload: ${{ env.short_name }}"
          title: "upload: ${{ env.short_name }}"
          body: "adding upload from issue #${{ github.event.issue.number }}"
          branch: upload_${{ env.SIMNAME }}_${{ github.event.issue.number }}
          token: ${{ secrets.PFHUB_UPLOAD_USER }}
          delete-branch: true
          author: ${{ env.AUTHOR }} <${{ env.AUTHOR }}@users.noreply.github.com>

      # Comment back to the issue with link to the PR.
      - name: Create Comment
        uses: peter-evans/create-or-update-comment@v2
        if: ${{ steps.create-pr.outputs.pull-request-number }}
        with:
          issue-number: ${{ github.event.issue.number }}
          token: ${{ secrets.PFHUB_UPLOAD_USER }}
          body: >-
            Thanks for the upload! Your submission has opened
            pull-request #${{ steps.create-pr.outputs.pull-request-number }}.
            Please follow up there. Wait for the build processes to
            complete and then follow the posted comments.
